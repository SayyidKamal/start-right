//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace start_right.Module.BusinessObjects.StartRight
{

    public partial class tblResult : XPLiteObject
    {
        DateTime fResultDate;
        public DateTime ResultDate
        {
            get { return fResultDate; }
            set { SetPropertyValue<DateTime>(nameof(ResultDate), ref fResultDate, value); }
        }
        int fTerm;
        public int Term
        {
            get { return fTerm; }
            set { SetPropertyValue<int>(nameof(Term), ref fTerm, value); }
        }
        tblSubject fsubjectName;
        [Association(@"tblResultReferencestblSubject")]
        public tblSubject subjectName
        {
            get { return fsubjectName; }
            set { SetPropertyValue<tblSubject>(nameof(subjectName), ref fsubjectName, value); }
        }
        double fmidTerm;
        public double midTerm
        {
            get { return fmidTerm; }
            set { SetPropertyValue<double>(nameof(midTerm), ref fmidTerm, value); }
        }
        double fexam;
        public double exam
        {
            get { return fexam; }
            set { SetPropertyValue<double>(nameof(exam), ref fexam, value); }
        }
        [PersistentAlias("[midTerm] + [exam]")]
        public double total
        {
            get { return (double)(EvaluateAlias(nameof(total))); }
        }
        [PersistentAlias("Iif([total] >= 90, 'A', [total] >= 80, 'B', [total] >= 70, 'C', [total] >= 60, 'D', [total] >= 50, 'E', 'F')")]
        public string grade
        {
            get { return (string)(EvaluateAlias(nameof(grade))); }
        }
        [PersistentAlias("Iif([total] >= 90, 'Excellent', [total] >= 80, 'Very Good', [total] >= 70, 'Good', [total] >= 60, 'Satisfactory', [total] >= 50, 'Fair', 'Weak')")]
        public string comment
        {
            get { return (string)(EvaluateAlias(nameof(comment))); }
        }
        tblStudent fStudent;
        [Association(@"tblResultReferencestblStudent")]
        public tblStudent Student
        {
            get { return fStudent; }
            set { SetPropertyValue<tblStudent>(nameof(Student), ref fStudent, value); }
        }
        int fid;
        [Key(true)]
        public int id
        {
            get { return fid; }
            set { SetPropertyValue<int>(nameof(id), ref fid, value); }
        }
    }

}
